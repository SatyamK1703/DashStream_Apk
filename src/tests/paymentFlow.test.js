/**
 * Payment Flow End-to-End Test Script
 * 
 * This script tests the complete payment flow from order creation to verification
 * using the Razorpay test mode.
 */

const axios = require('axios');
const { API_CONFIG } = require('../constants/config');

// Test configuration
const TEST_CONFIG = {
  bookingId: 'test-booking-123',
  amount: 1000, // ₹10.00 in paise
  currency: 'INR',
  testApiKey: 'rzp_test_yourtestkey', // Replace with your Razorpay test key
  testApiSecret: 'yourtestsecret', // Replace with your Razorpay test secret
  customerEmail: 'test@example.com',
  customerPhone: '9999999999',
  customerName: 'Test User',
};

// Mock Razorpay payment response
const mockRazorpayResponse = {
  razorpay_payment_id: 'pay_' + Math.random().toString(36).substring(2, 15),
  razorpay_order_id: 'order_' + Math.random().toString(36).substring(2, 15),
  razorpay_signature: 'signature_' + Math.random().toString(36).substring(2, 20),
};

/**
 * Test the complete payment flow
 */
async function testPaymentFlow() {
  console.log('🧪 Starting Payment Flow Test');
  console.log('----------------------------------------');
  
  try {
    // Step 1: Create a payment order
    console.log('Step 1: Creating payment order...');
    const orderResponse = await createTestOrder();
    console.log('✅ Order created successfully:', orderResponse.id);
    
    // Step 2: Simulate payment completion (in real scenario, this happens in the Razorpay UI)
    console.log('\nStep 2: Simulating payment completion...');
    console.log('✅ Payment completed with ID:', mockRazorpayResponse.razorpay_payment_id);
    
    // Step 3: Verify the payment
    console.log('\nStep 3: Verifying payment...');
    const verificationResponse = await verifyTestPayment(orderResponse.id);
    console.log('✅ Payment verification response:', verificationResponse.success ? 'Success' : 'Failed');
    
    // Step 4: Fetch payment details
    console.log('\nStep 4: Fetching payment details...');
    const paymentDetails = await getTestPaymentDetails(mockRazorpayResponse.razorpay_payment_id);
    console.log('✅ Payment details retrieved successfully');
    
    // Step 5: Fetch user payment history
    console.log('\nStep 5: Fetching user payment history...');
    const paymentHistory = await getTestPaymentHistory();
    console.log(`✅ Retrieved ${paymentHistory.length} payments from history`);
    
    console.log('\n----------------------------------------');
    console.log('🎉 Payment Flow Test Completed Successfully!');
    return true;
  } catch (error) {
    console.error('❌ Test Failed:', error.message);
    console.error('Error details:', error);
    return false;
  }
}

/**
 * Create a test payment order
 */
async function createTestOrder() {
  try {
    const response = await axios.post(
      API_CONFIG.BASE_URL + API_CONFIG.PAYMENT_ENDPOINTS.CREATE_ORDER,
      {
        bookingId: TEST_CONFIG.bookingId,
        amount: TEST_CONFIG.amount,
        currency: TEST_CONFIG.currency,
        receipt: `receipt_${Date.now()}`,
        notes: {
          bookingId: TEST_CONFIG.bookingId,
          customerEmail: TEST_CONFIG.customerEmail,
        },
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer test-token', // Replace with your auth token
        },
      }
    );
    
    return response.data;
  } catch (error) {
    console.error('Error creating test order:', error.message);
    throw error;
  }
}

/**
 * Verify a test payment
 */
async function verifyTestPayment(orderId) {
  try {
    // In a real test, you would use the actual signature generated by Razorpay
    // Here we're simulating the verification process
    const response = await axios.post(
      API_CONFIG.BASE_URL + API_CONFIG.PAYMENT_ENDPOINTS.VERIFY_PAYMENT,
      {
        razorpay_payment_id: mockRazorpayResponse.razorpay_payment_id,
        razorpay_order_id: orderId,
        razorpay_signature: mockRazorpayResponse.razorpay_signature,
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer test-token', // Replace with your auth token
        },
      }
    );
    
    return response.data;
  } catch (error) {
    console.error('Error verifying test payment:', error.message);
    throw error;
  }
}

/**
 * Get test payment details
 */
async function getTestPaymentDetails(paymentId) {
  try {
    const response = await axios.get(
      `${API_CONFIG.BASE_URL}${API_CONFIG.PAYMENT_ENDPOINTS.PAYMENT_DETAILS}/${paymentId}`,
      {
        headers: {
          'Authorization': 'Bearer test-token', // Replace with your auth token
        },
      }
    );
    
    return response.data;
  } catch (error) {
    console.error('Error getting test payment details:', error.message);
    throw error;
  }
}

/**
 * Get test payment history
 */
async function getTestPaymentHistory() {
  try {
    const response = await axios.get(
      API_CONFIG.BASE_URL + API_CONFIG.PAYMENT_ENDPOINTS.USER_PAYMENTS,
      {
        headers: {
          'Authorization': 'Bearer test-token', // Replace with your auth token
        },
      }
    );
    
    return response.data;
  } catch (error) {
    console.error('Error getting test payment history:', error.message);
    throw error;
  }
}

// Run the test if this file is executed directly
if (require.main === module) {
  testPaymentFlow()
    .then(success => {
      if (success) {
        console.log('Test completed successfully');
        process.exit(0);
      } else {
        console.error('Test failed');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('Test error:', error);
      process.exit(1);
    });
}

module.exports = {
  testPaymentFlow,
  createTestOrder,
  verifyTestPayment,
  getTestPaymentDetails,
  getTestPaymentHistory,
};